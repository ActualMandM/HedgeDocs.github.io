{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"HedgeDocs HedgeDocs is a webpage containing several guides and tools to be used for modding Sonic the Hedgehog games. Tools Guides Discoveries","title":"Home"},{"location":"discoveries/","text":"Discoveries This section contains discoveries of unused/cut content from Sonic games. While not documentation, these are always interesting to read about.","title":"Discoveries"},{"location":"discoveries/#discoveries","text":"This section contains discoveries of unused/cut content from Sonic games. While not documentation, these are always interesting to read about.","title":" Discoveries"},{"location":"discoveries/sonic2013/example/","text":"Test","title":"Example"},{"location":"discoveries/sonic2013/example/#test","text":"","title":"Test"},{"location":"guides/","text":"Guides This section contains guides that should hopefully teach you how to mod certain aspects of a couple of Sonic games. On the left you can see the games divided by the engine they use. In each engine, you can see common guides for every game using it, as well as more specific guides regarding a particular game.","title":"Guides"},{"location":"guides/#guides","text":"This section contains guides that should hopefully teach you how to mod certain aspects of a couple of Sonic games. On the left you can see the games divided by the engine they use. In each engine, you can see common guides for every game using it, as well as more specific guides regarding a particular game.","title":" Guides"},{"location":"guides/hedgehog-engine/blueblur/files/xncp/anims/","text":"Info This guide uses the following tools: 010 Editor (with XNCP Template) These tools and more can be found in the XNCP tools page XNCP Animations XNCP animations for a specific scene are listed in AnimationDictionary , which behaves the same way as the CastDictionary: In AnimationFrameDataList , it\u2019s possible to control the amount of keyframes that a specific animation has: To control the speed of these animations, we have a single field in the scene that controls the frame rate: AnimationKeyFrameDataList contains the information for all the keyframes in the animation, as well as the casts that belong in that animation. In the screenshot above, we\u2019re seeing the data referring to Animation 0 ( Intro_Anim when following the dictionary). XNCPs usually follow this naming scheme for animations: Intro_Anim - Animation that plays when the scene appears Usual_Anim - Normally a looping animation, is used during the scenes visible state Outro_Anim - Played before the scene disappears They can obviously store other animations, and those have their own names. So, in Intro_Anim, we have several CastAnimationData . These control what happens to each cast in this animation. Let\u2019s see what happens to Cast 0 (position, which usually is the parent of all casts in a scene and controls their position)... Seems like we have flags! It\u2019s a bitfield, and it controls what actually animates in this cast. Here\u2019s the meaning of each bit: 0000 0000 - Nothing 0000 0001 - Unknown 0000 0010 - X Position 0000 0100 - Y Position 0000 1000 - Rotation 0001 0000 - X Scale 0010 0000 - Y Scale 0100 0000 - SubImage 1000 0000 - Colour Mask So, with this info, we now know what animates in the position cast: It\u2019s its X Position. The CastAnimationDataSubData1List is what stores the actual animation data. The amount of entries in this list depends on the number of bits signaled in the Flags field. The first entry in the list is referring to the first bit signaled from right to left. So by that logic, the list only has one entry. And there we go. This entry is what stores the actual KeyFrames . Let\u2019s open one up to see how it is. Scary right? I don\u2019t understand much of what\u2019s going on here, but here we go. Frame defines which global frame this keyframe is in. Remember AnimationFrameDataList ? Yeah, this animation has a total of 10 frames, and is played at 60 FPS. For each frame, you define the global frame that it refers to. So, since this cast controls the position of the entire scene, and this is the intro animation, maybe the other keyframe has the frame field set to 10? We\u2019ll see about that shortly. Data store the data of this keyframe. The meaning of data changes depending on the flags. Data can be: A position An angle (for rotation) A size (for X and Y scale) An index (for SubImage) A colour (for ColorMask) According to the flags of this specific cast, these keyframes are supposed to control the X Position, which means that \u201cdata\u201d actually represents the X Position of the cast in this frame. The Offset and Offset2 fields are unknown. They seem to offset the value in the Data field, but I don\u2019t know their actual meanings. I still don\u2019t know how animations loop, and if that\u2019s even defined in the XNCP. I\u2019d assume it\u2019s in some of these fields, but I\u2019m not sure. Maybe the game just keeps playing the animation and the XNCP doesn\u2019t control that? Anyway let\u2019s look at the second keyframe then: As we suspected, the Frame field is now set to 10, meaning this is referring to the last frame in the animation. The value in Data has increased, so this means that this cast slides from left to right in this animation! Looking at the remaining CastAnimationData entries, we can see that none of them animate, since their Flags field is set to 0. So we can conclude that Intro_Anim makes the position cast slide from left to right , and since \u201cposition\u201d controls the entire scene, every single cast from this scene slides from left to right in this animation! Hope I explained XNCP animations well enough. Have fun! PS: there\u2019s also AnimationData2List but...","title":"Animations"},{"location":"guides/hedgehog-engine/blueblur/files/xncp/anims/#xncp-animations","text":"XNCP animations for a specific scene are listed in AnimationDictionary , which behaves the same way as the CastDictionary: In AnimationFrameDataList , it\u2019s possible to control the amount of keyframes that a specific animation has: To control the speed of these animations, we have a single field in the scene that controls the frame rate: AnimationKeyFrameDataList contains the information for all the keyframes in the animation, as well as the casts that belong in that animation. In the screenshot above, we\u2019re seeing the data referring to Animation 0 ( Intro_Anim when following the dictionary). XNCPs usually follow this naming scheme for animations: Intro_Anim - Animation that plays when the scene appears Usual_Anim - Normally a looping animation, is used during the scenes visible state Outro_Anim - Played before the scene disappears They can obviously store other animations, and those have their own names. So, in Intro_Anim, we have several CastAnimationData . These control what happens to each cast in this animation. Let\u2019s see what happens to Cast 0 (position, which usually is the parent of all casts in a scene and controls their position)... Seems like we have flags! It\u2019s a bitfield, and it controls what actually animates in this cast. Here\u2019s the meaning of each bit: 0000 0000 - Nothing 0000 0001 - Unknown 0000 0010 - X Position 0000 0100 - Y Position 0000 1000 - Rotation 0001 0000 - X Scale 0010 0000 - Y Scale 0100 0000 - SubImage 1000 0000 - Colour Mask So, with this info, we now know what animates in the position cast: It\u2019s its X Position. The CastAnimationDataSubData1List is what stores the actual animation data. The amount of entries in this list depends on the number of bits signaled in the Flags field. The first entry in the list is referring to the first bit signaled from right to left. So by that logic, the list only has one entry. And there we go. This entry is what stores the actual KeyFrames . Let\u2019s open one up to see how it is. Scary right? I don\u2019t understand much of what\u2019s going on here, but here we go. Frame defines which global frame this keyframe is in. Remember AnimationFrameDataList ? Yeah, this animation has a total of 10 frames, and is played at 60 FPS. For each frame, you define the global frame that it refers to. So, since this cast controls the position of the entire scene, and this is the intro animation, maybe the other keyframe has the frame field set to 10? We\u2019ll see about that shortly. Data store the data of this keyframe. The meaning of data changes depending on the flags. Data can be: A position An angle (for rotation) A size (for X and Y scale) An index (for SubImage) A colour (for ColorMask) According to the flags of this specific cast, these keyframes are supposed to control the X Position, which means that \u201cdata\u201d actually represents the X Position of the cast in this frame. The Offset and Offset2 fields are unknown. They seem to offset the value in the Data field, but I don\u2019t know their actual meanings. I still don\u2019t know how animations loop, and if that\u2019s even defined in the XNCP. I\u2019d assume it\u2019s in some of these fields, but I\u2019m not sure. Maybe the game just keeps playing the animation and the XNCP doesn\u2019t control that? Anyway let\u2019s look at the second keyframe then: As we suspected, the Frame field is now set to 10, meaning this is referring to the last frame in the animation. The value in Data has increased, so this means that this cast slides from left to right in this animation! Looking at the remaining CastAnimationData entries, we can see that none of them animate, since their Flags field is set to 0. So we can conclude that Intro_Anim makes the position cast slide from left to right , and since \u201cposition\u201d controls the entire scene, every single cast from this scene slides from left to right in this animation! Hope I explained XNCP animations well enough. Have fun! PS: there\u2019s also AnimationData2List but...","title":"XNCP Animations"},{"location":"guides/hedgehog-engine/blueblur/levels/glvl/","text":"Info This guide uses the following tools: Sonic GLvl These tools and more can be found in the Level Editing tools page Note These video guides are old and are for Sonic GLvl 0.5.7. It's recommended you use the latest 0.9 version instead. Even if 0.9 is a more recent version, the general way of working with it remains the same, hence why these videos are still relevant. How to use Sonic GLvl with Sonic Generations Part 1 (Getting Levels and Camera Controls) Part 2 (Basic Level Editing and Testing your mod in-game)","title":"Sonic GLvl"},{"location":"guides/hedgehog-engine/blueblur/levels/glvl/#how-to-use-sonic-glvl-with-sonic-generations","text":"Part 1 (Getting Levels and Camera Controls) Part 2 (Basic Level Editing and Testing your mod in-game)","title":"How to use Sonic GLvl with Sonic Generations"},{"location":"guides/hedgehog-engine/common/lighting/example/","text":"This page is still a work in progress...","title":"Example Guide"},{"location":"guides/others/marathon/levels/glvl/","text":"Info This guide uses the following tools: Sonic GLvl Sonic '06 Stage Editing Archive Sonic '06 GLvl Converter (included with Sonic '06 Stage Editing Archive) Note Due to a lack of an actual, dedicated level editor for Sonic '06, we (at the time of writing) use a hacked together solution that allows us to use Sonic GLvl as a stand in. This guide will explain how to set up GLvl for this purpose, with the assumption that the user understands basic usage of the program itself. How to use Sonic GLvl with Sonic '06 Setting Up Download your preferred version of Sonic GLvl 0.9 and extract the repository to any location. Then, open the database folder and delete the objects folder. Next, download the Sonic '06 Stage Editing Archive and extract the SonicGLvl/database folder to your SonicGLvl location, choosing to merge/replace existing files. Converting Stage Terrain Pre converted copies of the actual Sonic '06 stages are present on the Stage Editing Archive repository (under the SonicGLvl/import directory). When converting your own terrain (such as for a stage mod) the process is almost identical to the conversion process for Sonic Generations (it's recommended to use the two #base files as a template). The crucial step is to remember to set the stage scale in HedgehogConverter to 1% on all three axis, as the scale does not match between both games. Usage The process of placing and editing objects at this point follows the workflow of using Sonic GLvl for a Generations stage mod, so will not be covered here. Groups Objects in '06 make frequent usage of grouping, allowing objects to influence each other in some way (such as an Egg Chaser commanding a squad of Egg Liners or defeating an enemy unlocking a cage). To set these up, create an XML in your stage's cache directory called groupdata_[x].group.xml (where [x] is a name, such as base ). Then lay them out as shown below. Each <Group> key is... Well... A Group that will be compiled into the converted SET. The <Name> key seems to just be for identification, so here (for Ocean Palace) I called it CageGroup01 as it was the first group I made that unlocked a cage. The <Type> key is the name of the lua event that this group will activate, this key can be left empty if the group doesn't need to activate anything. In this example, it's called Cage01, so it will fire the event called Cage01 in the stage's lua file; which, as you can probably guess, signalled a cage to open. The <ObjectCount> key simply lists how many objects this group has (and honestly shouldn't have even been a thing, but I wrote this thing incredibly badly). The subkeys within the <ObjectIDs> key simply give the ID of an object that should be in this group. These IDs are shown in the conversion log, and are also patched into the Generations SET if the Patch Generations SET option is used in the Converter (see below). '06 SET Conversion For converting between Generations and '06, we use the GLvl Converter. In the Source SET, select your Generations .set.xml file from your stage's cache directory in your GLvl location (will be named setdata_base.set.xml by default). If you've created any groups for your object layout (which need to be made manually, see above), then select the approriate groupdata_[x].group.xml file for the Groups XML option, otherwise, leave it blank. For the GLvl Templates, select the database\\objects folder. Target SET is simply where you want to save the converted object placement to. Filtered Object Names will prevent the Replace Object Names option from overwriting objects that have any of the inputted values as part of their names. This object is useful for group events where you're activating an object by its name. This converter can also convert from '06 to Generations by simply putting an '06 .set file as the source and a Generations .set.xml as the target. This can also convert '06 groups into an XML if a Groups XML path is specified. Due to how Sonic GLvl handles object IDs, they will often not match with the IDs that '06 uses. To correct this, choose the Patch Generations SET option, which will update the Generations .set.xml to show the correct IDs.","title":"Sonic GLvl"},{"location":"guides/others/marathon/levels/glvl/#how-to-use-sonic-glvl-with-sonic-06","text":"","title":"How to use Sonic GLvl with Sonic '06"},{"location":"guides/others/marathon/levels/glvl/#setting-up","text":"Download your preferred version of Sonic GLvl 0.9 and extract the repository to any location. Then, open the database folder and delete the objects folder. Next, download the Sonic '06 Stage Editing Archive and extract the SonicGLvl/database folder to your SonicGLvl location, choosing to merge/replace existing files.","title":"Setting Up"},{"location":"guides/others/marathon/levels/glvl/#converting-stage-terrain","text":"Pre converted copies of the actual Sonic '06 stages are present on the Stage Editing Archive repository (under the SonicGLvl/import directory). When converting your own terrain (such as for a stage mod) the process is almost identical to the conversion process for Sonic Generations (it's recommended to use the two #base files as a template). The crucial step is to remember to set the stage scale in HedgehogConverter to 1% on all three axis, as the scale does not match between both games.","title":"Converting Stage Terrain"},{"location":"guides/others/marathon/levels/glvl/#usage","text":"The process of placing and editing objects at this point follows the workflow of using Sonic GLvl for a Generations stage mod, so will not be covered here.","title":"Usage"},{"location":"guides/others/marathon/levels/glvl/#groups","text":"Objects in '06 make frequent usage of grouping, allowing objects to influence each other in some way (such as an Egg Chaser commanding a squad of Egg Liners or defeating an enemy unlocking a cage). To set these up, create an XML in your stage's cache directory called groupdata_[x].group.xml (where [x] is a name, such as base ). Then lay them out as shown below. Each <Group> key is... Well... A Group that will be compiled into the converted SET. The <Name> key seems to just be for identification, so here (for Ocean Palace) I called it CageGroup01 as it was the first group I made that unlocked a cage. The <Type> key is the name of the lua event that this group will activate, this key can be left empty if the group doesn't need to activate anything. In this example, it's called Cage01, so it will fire the event called Cage01 in the stage's lua file; which, as you can probably guess, signalled a cage to open. The <ObjectCount> key simply lists how many objects this group has (and honestly shouldn't have even been a thing, but I wrote this thing incredibly badly). The subkeys within the <ObjectIDs> key simply give the ID of an object that should be in this group. These IDs are shown in the conversion log, and are also patched into the Generations SET if the Patch Generations SET option is used in the Converter (see below).","title":"Groups"},{"location":"guides/others/marathon/levels/glvl/#06-set-conversion","text":"For converting between Generations and '06, we use the GLvl Converter. In the Source SET, select your Generations .set.xml file from your stage's cache directory in your GLvl location (will be named setdata_base.set.xml by default). If you've created any groups for your object layout (which need to be made manually, see above), then select the approriate groupdata_[x].group.xml file for the Groups XML option, otherwise, leave it blank. For the GLvl Templates, select the database\\objects folder. Target SET is simply where you want to save the converted object placement to. Filtered Object Names will prevent the Replace Object Names option from overwriting objects that have any of the inputted values as part of their names. This object is useful for group events where you're activating an object by its name. This converter can also convert from '06 to Generations by simply putting an '06 .set file as the source and a Generations .set.xml as the target. This can also convert '06 groups into an XML if a Groups XML path is specified. Due to how Sonic GLvl handles object IDs, they will often not match with the IDs that '06 uses. To correct this, choose the Patch Generations SET option, which will update the Generations .set.xml to show the correct IDs.","title":"'06 SET Conversion"},{"location":"tools/","text":"Tools This section contains tools that allow you to mod certain aspects of a couple of Sonic games. On the left you can see the games divided by the engine they use. In each engine, you can see common tools for every game using it, as well as more specific tools regarding a particular game.","title":"Tools"},{"location":"tools/#tools","text":"This section contains tools that allow you to mod certain aspects of a couple of Sonic games. On the left you can see the games divided by the engine they use. In each engine, you can see common tools for every game using it, as well as more specific tools regarding a particular game.","title":" Tools"},{"location":"tools/hedgehog-engine/blueblur/audio/","text":"Audio Tools This page is still a work in progress...","title":"Audio"},{"location":"tools/hedgehog-engine/blueblur/audio/#audio-tools","text":"This page is still a work in progress...","title":"Audio Tools"},{"location":"tools/hedgehog-engine/blueblur/levels/","text":"Level Editing Tools SonicGLvl Level editor for Sonic Generations. GitHub Repository","title":"Level Editing"},{"location":"tools/hedgehog-engine/blueblur/levels/#level-editing-tools","text":"","title":"Level Editing Tools"},{"location":"tools/hedgehog-engine/blueblur/levels/#sonicglvl","text":"Level editor for Sonic Generations. GitHub Repository","title":"SonicGLvl"},{"location":"tools/hedgehog-engine/blueblur/files/ar/","text":"AR/ARL Tools CompressAR Tool to compress and decompress AR files for Sonic Generations, using 'makecab' and 'expand'. Download","title":"AR/ARL"},{"location":"tools/hedgehog-engine/blueblur/files/ar/#ararl-tools","text":"","title":"AR/ARL Tools"},{"location":"tools/hedgehog-engine/blueblur/files/ar/#compressar","text":"Tool to compress and decompress AR files for Sonic Generations, using 'makecab' and 'expand'. Download","title":"CompressAR"},{"location":"tools/hedgehog-engine/blueblur/files/gte/","text":"GTE/GTM Tools GlitterStudio Editor application to open, modify, and resave GTE/GTM particle files for Sonic Generations. Download","title":"GTE/GTM"},{"location":"tools/hedgehog-engine/blueblur/files/gte/#gtegtm-tools","text":"","title":"GTE/GTM Tools"},{"location":"tools/hedgehog-engine/blueblur/files/gte/#glitterstudio","text":"Editor application to open, modify, and resave GTE/GTM particle files for Sonic Generations. Download","title":"GlitterStudio"},{"location":"tools/hedgehog-engine/blueblur/files/xncp/","text":"XNCP Tools 010 Editor Allows editing various file formats, in particular the XNCP format through the use of a template. Download XNCP Template","title":"XNCP"},{"location":"tools/hedgehog-engine/blueblur/files/xncp/#xncp-tools","text":"","title":"XNCP Tools"},{"location":"tools/hedgehog-engine/blueblur/files/xncp/#010-editor","text":"Allows editing various file formats, in particular the XNCP format through the use of a template. Download XNCP Template","title":"010 Editor"},{"location":"tools/hedgehog-engine/common/files/","text":"File Format Tools HedgeArchiveEditor Warning Sonic Forces PAC saving is currently broken, but unpacking is fine. As an alternative, you may use SFPac Allows opening, editing and creating Hedgehog Engine files (AR and PAC). Is also capable of opening .ONE archives (Sonic Heroes and the storybook games) Download Source Code SkythTools Contains various tools for a bunch of Sonic the Hedgehog games. Read the README to have detailed information about each tool included in the repository. Download GitHub Repository","title":"File Formats"},{"location":"tools/hedgehog-engine/common/files/#file-format-tools","text":"","title":"File Format Tools"},{"location":"tools/hedgehog-engine/common/files/#hedgearchiveeditor","text":"Warning Sonic Forces PAC saving is currently broken, but unpacking is fine. As an alternative, you may use SFPac Allows opening, editing and creating Hedgehog Engine files (AR and PAC). Is also capable of opening .ONE archives (Sonic Heroes and the storybook games) Download Source Code","title":"HedgeArchiveEditor"},{"location":"tools/hedgehog-engine/common/files/#skythtools","text":"Contains various tools for a bunch of Sonic the Hedgehog games. Read the README to have detailed information about each tool included in the repository. Download GitHub Repository","title":"SkythTools"},{"location":"tools/hedgehog-engine/common/lighting/","text":"Lighting Tools HedgeGI Tool that allows you to bake global illumination and light field data for Hedgehog Engine games. GitHub Repository","title":"Lighting/GI"},{"location":"tools/hedgehog-engine/common/lighting/#lighting-tools","text":"","title":"Lighting Tools"},{"location":"tools/hedgehog-engine/common/lighting/#hedgegi","text":"Tool that allows you to bake global illumination and light field data for Hedgehog Engine games. GitHub Repository","title":"HedgeGI"},{"location":"tools/hedgehog-engine/sonic2013/levels/","text":"Level Editing Tools SonicGLvl Lost World Fork of SonicGLvl for Sonic Lost World. GitHub Repository","title":"Level Editing"},{"location":"tools/hedgehog-engine/sonic2013/levels/#level-editing-tools","text":"","title":"Level Editing Tools"},{"location":"tools/hedgehog-engine/sonic2013/levels/#sonicglvl-lost-world","text":"Fork of SonicGLvl for Sonic Lost World. GitHub Repository","title":"SonicGLvl Lost World"},{"location":"tools/hedgehog-engine-2/wars/files/pac/","text":"PAC Tools SFPac Tool to unpack and repack Sonic Forces PAC files. Download Python Script","title":"PAC"},{"location":"tools/hedgehog-engine-2/wars/files/pac/#pac-tools","text":"","title":"PAC Tools"},{"location":"tools/hedgehog-engine-2/wars/files/pac/#sfpac","text":"Tool to unpack and repack Sonic Forces PAC files. Download Python Script","title":"SFPac"},{"location":"tools/others/marathon/files/","text":"File Format Tools Marathon.CLI All in one tool that allows extraction and repacking of Sonic '06 .arc archives, as well as conversion of multiple formats to and from human readable JSON files. Download GitHub Repository Sonic '06 GLvl Converter A hacky tool to convert a Sonic Generations .set.xml using custom templates to a Sonic '06 .set file, allowing a form of usage of Sonic GLvl 0.9 for Sonic '06 stage modding. GitHub Repository","title":"File Formats"},{"location":"tools/others/marathon/files/#file-format-tools","text":"","title":"File Format Tools"},{"location":"tools/others/marathon/files/#marathoncli","text":"All in one tool that allows extraction and repacking of Sonic '06 .arc archives, as well as conversion of multiple formats to and from human readable JSON files. Download GitHub Repository","title":"Marathon.CLI"},{"location":"tools/others/marathon/files/#sonic-06-glvl-converter","text":"A hacky tool to convert a Sonic Generations .set.xml using custom templates to a Sonic '06 .set file, allowing a form of usage of Sonic GLvl 0.9 for Sonic '06 stage modding. GitHub Repository","title":"Sonic '06 GLvl Converter"},{"location":"tools/others/sonic2010/levels/","text":"Level Editing Tools Sonic Colors Set Editor Sonic Colors Set Data editor powered by HedgeLib. GitHub Repository","title":"Level Editing"},{"location":"tools/others/sonic2010/levels/#level-editing-tools","text":"","title":"Level Editing Tools"},{"location":"tools/others/sonic2010/levels/#sonic-colors-set-editor","text":"Sonic Colors Set Data editor powered by HedgeLib. GitHub Repository","title":"Sonic Colors Set Editor"},{"location":"tools/others/sonic2010/files/xncp/","text":"XNCP Tools Warning The XNCP file format is only used in Sonic Colours: Ultimate 010 Editor Allows editing various file formats, in particular the XNCP format through the use of a template. Download XNCP Template ColoursXNCPGen Basic tool to combine XNCP and DXL files. Download","title":"XNCP"},{"location":"tools/others/sonic2010/files/xncp/#xncp-tools","text":"Warning The XNCP file format is only used in Sonic Colours: Ultimate","title":"XNCP Tools"},{"location":"tools/others/sonic2010/files/xncp/#010-editor","text":"Allows editing various file formats, in particular the XNCP format through the use of a template. Download XNCP Template","title":"010 Editor"},{"location":"tools/others/sonic2010/files/xncp/#coloursxncpgen","text":"Basic tool to combine XNCP and DXL files. Download","title":"ColoursXNCPGen"},{"location":"tools/renderware/common/levels/","text":"Level Editing Tools Heroes Power Plant Level editor for Sonic Heroes and Shadow the Hedgehog. Download GitHub Repository","title":"Level Editing"},{"location":"tools/renderware/common/levels/#level-editing-tools","text":"","title":"Level Editing Tools"},{"location":"tools/renderware/common/levels/#heroes-power-plant","text":"Level editor for Sonic Heroes and Shadow the Hedgehog. Download GitHub Repository","title":"Heroes Power Plant"},{"location":"tools/renderware/common/files/one/","text":"ONE Tools HeroesONE Reloaded Tool/library for reading and writing Sonic Heroes and Shadow The Hedgehog's .ONE archives. Download GitHub Repository","title":"ONE"},{"location":"tools/renderware/common/files/one/#one-tools","text":"","title":"ONE Tools"},{"location":"tools/renderware/common/files/one/#heroesone-reloaded","text":"Tool/library for reading and writing Sonic Heroes and Shadow The Hedgehog's .ONE archives. Download GitHub Repository","title":"HeroesONE Reloaded"}]}